/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.text.DecimalFormat;
import javax.swing.JOptionPane;
import logic.HrSystem;

/**
 *
 * @author Abdulla Ali - Malik Kamal
 * Name: Produce Pay Report
 * purpose: to prompt the user to display and export the pay report for the company 
 * @version 2
 */
public class PayReport extends javax.swing.JFrame {

    private DecimalFormat df2 = new DecimalFormat("#,###.00");

    /**
     * Purpose: Creates new form PayReport
     * @author: Abdulla Ali - Malik Kamal
     * Name: Pay Report
     */
    public PayReport() {
        //centers the window and changes backgorund color
        initComponents();
        java.awt.Color recursiveBG = new java.awt.Color(240, 240, 240);
        getContentPane().setBackground(recursiveBG);
        Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (int) ((dimension.getWidth() - this.getWidth()) / 2);
        int y = (int) ((dimension.getHeight() - this.getHeight()) / 2);
        this.setLocation(x, y);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnClose = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaReport = new javax.swing.JTextArea();
        btnDispReport = new javax.swing.JButton();
        lblPayReport = new javax.swing.JLabel();
        btnExport = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        btnClose.setBackground(new java.awt.Color(255, 153, 153));
        btnClose.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        txtAreaReport.setEditable(false);
        txtAreaReport.setColumns(20);
        txtAreaReport.setFont(new java.awt.Font("Monospaced", 0, 17)); // NOI18N
        txtAreaReport.setLineWrap(true);
        txtAreaReport.setRows(5);
        jScrollPane1.setViewportView(txtAreaReport);

        btnDispReport.setBackground(new java.awt.Color(153, 255, 153));
        btnDispReport.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnDispReport.setText("Display Report");
        btnDispReport.setToolTipText("");
        btnDispReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDispReportActionPerformed(evt);
            }
        });

        lblPayReport.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        lblPayReport.setForeground(new java.awt.Color(0, 0, 204));
        lblPayReport.setText("Produce Pay Report");

        btnExport.setBackground(new java.awt.Color(153, 255, 153));
        btnExport.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnExport.setText("Export to File");
        btnExport.setToolTipText("");
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(93, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblPayReport)
                        .addGap(272, 272, 272))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)
                        .addComponent(btnDispReport)
                        .addGap(67, 67, 67)
                        .addComponent(btnExport)
                        .addGap(153, 153, 153))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 753, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(lblPayReport)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDispReport, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExport, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDispReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDispReportActionPerformed
        // checking if there are any data in the system 
        if (!HrSystem.getAllDepartments().isEmpty()) {
            double dep_sum;
            double total_sum = 0;
            //title for the pay report
            this.txtAreaReport.append("Pay Report for the company\n");
            //for loop to print all deparmnets and all the employees within them
            for (int i = 0; i < HrSystem.getAllDepartments().size(); i++) {
                dep_sum = 0.0;
                if (!HrSystem.getAllDepartments().get(i).getListOfEmployees().isEmpty()) {
                    this.txtAreaReport.append("\nDepartment ID: " + HrSystem.getAllDepartments().get(i).getId());
                    this.txtAreaReport.append("\t\tDepartment Name: " + HrSystem.getAllDepartments().get(i).getName());
                    for (int j = 0; j < HrSystem.getAllDepartments().get(i).getListOfEmployees().size(); j++) {
                        this.txtAreaReport.append("\n\tName: " + HrSystem.getAllDepartments().get(i).getListOfEmployees().get(j).getFirstName() + " "
                                + HrSystem.getAllDepartments().get(i).getListOfEmployees().get(j).getLastName());
                        this.txtAreaReport.append("\tID: " + Integer.toString(HrSystem.getAllDepartments().get(i).getListOfEmployees().get(j).getId()));
                        this.txtAreaReport.append("\tPay: " + df2.format(HrSystem.getAllDepartments().get(i).getListOfEmployees().get(j).getPayLevel().getValue() / 26));
                        //calulating the sum per department
                        dep_sum += HrSystem.getAllDepartments().get(i).getListOfEmployees().get(j).getPayLevel().getValue() / 26;
                    }
                    //the sum for the whole company
                    total_sum += dep_sum;
                    this.txtAreaReport.append("\nThe total amount for department (BD): " + df2.format(dep_sum) + "\n");
                }
            }
            this.txtAreaReport.append("\nTotal amount to be paid by the compnay (BD): " + df2.format(total_sum));
        }
    }//GEN-LAST:event_btnDispReportActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:
        //validtion before exiting
        int reply = JOptionPane.showConfirmDialog(
                null,
                "Are you sure you want to close this window?",
                "Warning", JOptionPane.YES_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            this.dispose();
        }
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        // TODO add your handling code here:
        //exporting the pay report to a plain simple text file
        try {
            File f_temp = new File("payroll.txt");
            PrintStream ps = new PrintStream(f_temp);
            //clearing exiting files
            if (!HrSystem.getAllDepartments().isEmpty()) {
                if (f_temp.exists()) {
                    ps.print("");
                }
                double dep_sum;
                double total_sum = 0;
                ps.append("Pay Report for the company\n");
                //loop for deparments and employees and output to file.
                for (int i = 0; i < HrSystem.getAllDepartments().size(); i++) {
                    dep_sum = 0.0;
                    if (!HrSystem.getAllDepartments().get(i).getListOfEmployees().isEmpty()) {
                        ps.append("\r\nDepartment ID: " + HrSystem.getAllDepartments().get(i).getId());
                        ps.append("\t\tDepartment Name: " + HrSystem.getAllDepartments().get(i).getName());
                        for (int j = 0; j < HrSystem.getAllDepartments().get(i).getListOfEmployees().size(); j++) {
                            ps.append("\r\ntName: " + HrSystem.getAllDepartments().get(i).getListOfEmployees().get(j).getFirstName() + " "
                                    + HrSystem.getAllDepartments().get(i).getListOfEmployees().get(j).getLastName());
                            ps.append("\tID: " + Integer.toString(HrSystem.getAllDepartments().get(i).getListOfEmployees().get(j).getId()));
                            //formating the output to two decimal places.
                            ps.append("\tPay: " + df2.format(HrSystem.getAllDepartments().get(i).getListOfEmployees().get(j).getPayLevel().getValue() / 26));
                            dep_sum += HrSystem.getAllDepartments().get(i).getListOfEmployees().get(j).getPayLevel().getValue() / 26;
                        }
                        total_sum += dep_sum;
                        ps.append("\r\nThe total amount for department (BD): " + df2.format(dep_sum));
                    }
                }
                ps.append("\r\nTotal amount to be paid by the compnay (BD): " + df2.format(total_sum));
                JOptionPane.showMessageDialog(null,
                        "PayRoll file has been successfully created", "Success",
                        JOptionPane.INFORMATION_MESSAGE);
            }
            //catching the exception if the file is not found
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null,
                    "File not found and was unable to create it.\nError: " + ex, "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnExportActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
         //validtion before exiting
        int reply = JOptionPane.showConfirmDialog(
                null,
                "Are you sure you want to close this window?",
                "Warning", JOptionPane.YES_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            this.dispose();
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PayReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PayReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PayReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PayReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PayReport().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnDispReport;
    private javax.swing.JButton btnExport;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblPayReport;
    private javax.swing.JTextArea txtAreaReport;
    // End of variables declaration//GEN-END:variables
}
